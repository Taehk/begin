# day12

상속
	==> 이미 만들어져있는 클래스를 다시 코딩하지 않고
		그대로 물려받아서 추가할 기능은 추가하고
		수정할 기능을 수정해서 
		클래스를 제작해서 프로그램을 만들어나가는 기법
		
		참조형 변수 ]
			타입을 결정하는 것은
			인스턴스에 변수쪽 클래스의 멤버가 모두 있느냐 모자라냐...
			
		결국
		상속받은 클래스의 멤버는 상속해준 클래스의 멤버의 갯수보다 많을것이다.
		
		오버라이딩(함수의 재정의)
			0.
			1. 함수의 원형이 일치해야 한다.
				함수의 원형 : 반환값타입 + 함수이름 + 매개변수리스트
			2. 접근지정자는 같거나 넓은 방향으로...
				 참고 ] 클래스에 사용할 수 있는 접근지정자 : 생략, public
			3. 예외처리는 같거나 좁은 방향으로... 
			
	
	상속관계에 있는 경우
	상위 클래스의 변수에서 함수를 호출하게 되면 	
	최종적으로 하위클래스에서 오버라이딩한 함수가 호출된다.
	
---------------------------------------------------------------------------------------------------------------

*****
다형성
==> 하나의 변수를 이용해서 여러 형태의 클래스를 사용하도록 하는 방법	

	Casting(주소의 형변환)
	==> 원칙적으로 주소는 다른 형태로 형변환이 불가능하다.
		즉, 주소는 Heap Type 형태에 따라 주소가 결정된다.
		Heap 형태가 다르면 주소를 기억할 수 없다.
		
		예 ]
			int[] num = new float[10];
			Test t = new Sample(); 			//  상속 관계가 아닌경우는 불가능하다.
			
	***
	딱 한가지 경우에 한해서 주소(참조형 타입)의 형변환이 가능하다.
	상속 관계에 있는 클래스 끼리는 형변환이 가능하다.
	왜?? is a 관계이기 때문이다.
	
		자동 형변환
			==> 하위 클래스의 주소가 상위 클래스 변수에 기억되는 것은
				자동적으로 형변환을 해준다.
			
		강제 형변환
			==> 상위 클래스의 주소가 하위 클래스의 변수에 기억되는 것은
				원칙적으로는 불가능하다.
				다만 강제로 형변화을 해주어야 한다.
				
				
		예 ]
			class Father {
			}
			
			class Son {
			}
			
			Father f = new Son(); // ==> 자동 형변환
			Son s = new Father();	==> X
			
			Father f1 = new Father();
			Son s = (Son) f1;	==> 강제형변환
			
	다형성이란?
		상위 클래스의 변수를 이용해서 하위클래스의 인스턴스를 이용할 수 있으며
		이것은 상위 클래스의 변수를 이용하면
		여러 하위 클래스의 인스턴스들을 다룰 수 있다.
		
		하위 클래스의 인스턴스는 상위 클래스들의 레퍼런스로 사용할 수 있다.
		
		참고 ]
			클래스의 인스턴스의 타입을 따질때는
			반드시 그 인스턴스에 해당 클래스의 멤버가 존재하는지를 따져주면 된다.
			
			
	참고 ]
		다형성을 개발자 입장에서 사용하는 방법
			
			1. 어떤 함수가 상위 클래스를 매개변수로 가지고 있으면
				하위클래스의 인스턴스를 입력해도 상관이 없다.
				
				따라서 만약 어떤 함수가 Object 타입으로 매개변수가 정의 되어있으면
				이경우 Object 클래스의 인스턴스를 만들어서 
				함수를 호출하는 경우는 없다.
				대신 이 함수는 모든 클래스들의 인스턴스를 매개변수로 입력해되 되는 함수이다.
				
			2. 어떤 함수가 상위 클래스를 반환값으로 가지고 있으면
				반드시 원하는 하위 클래스 형태로 형변환해서 사용해야 한다.
				
				
				참고 ]
					어떤 반환값이나 넘겨받은 데이터의 타입이 Object 인 경우
					그 데이터를 연산을 할때는 반드시 원래 가지는 타입으로 
					강제 형변환해서 사용해야 한다.
					
===============================================================================================================

추상 클래스
==> 추상 함수를 0개이상 가지고 있는 클래스
	즉, 추상함수가 한개도 없어도 강제로 추상 클래스를 만들 수 있고
	추상함수가 한개라도 있으면 반드시 추상클래스로 만들어야 한다.
	
	추상함수란?
	==>	함수의 몸체(블럭 : {} )가 없는 함수를 말한다.
		즉, 기능이 없는 함수를 말한다.
		
		
		형식 ]
			
			접근지정자	abstract	반환값		함수이름(매개변수리스트);
			
		예 ]
			
			public abstract void abc(int a);
			
	추상클래스 만드는 방법 ]
		
		형식 ]
			
			접근지정자	abstract	class 	클래스이름 {
				변수선언;
				일반함수(){}
				일반함수(){}
				일반함수(){}
				
				[ 추상함수(); ] ==> 와도되고 없어도 추상클래스로 강제로 만들 수 있다.
			}
			
		
		이유 ]
			다형성 구현을 하기 위해서....
			
			
	추상클래스를 사용하는 방법
	==> 추상 클래스는 new 시켜서 사용할 수 없는 클래스이다.
		왜냐하면 그 안에는 기능이 없는 함수가 존재 할 수 있기 때문에....
		
		1. 다른 클래스에 상속해준 후
			추상함수의 기능을 만들어주고(==> {} 을 만들고 그 안에 기능을 구현하고...)
			상속받은 클래스를 new 시켜서
			추상클래스의 변수에 담아서 사용하면 된다.
			
			==> 실무에서 이렇게 사용하는 경우는 10% 정도 미만...
			
		2. 실무에서는 추상 클래스 안에 
			속성이 static 이면서 반환값이 자기자신인 함수를 찾아서
			그 함수를 호출해서 인스턴스를 얻어서 사용하면 된다.
			
			예 ]
				Calendar 클래스 사용법
					
					Calendar cal = Calendar.getInstance();
					
					이렇게 하면 함수가 Calendar 인스턴스를 반환해준다.
					
	참고 ]
		추상 클래스가 아님에도
		생성자 함수가 존재하지 않는 것 처럼 보이는 클래스가 있다.
		이 클래스는 생성자 함수가 존재하지 않는것이 아니고
		생성자의 접근지정자를  private 으로 감춰놓은 것이다.
		이런경우 마찬가지로 new 시켜서 사용할 수 없고
		추상클래스와 마찬가지로 
		속성이  static 이면서 반환값이 자기자신인 함수를 찾아서 실행해서 
		객체를 만들어서 사용해야 한다.
		
		만약 자신에게 그런 함수가 없는 경우는
		관련된 클래스에 그런 함수가 존재하므로 찾아서 그 함수를 호출해서 사용하면 된다.
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
			
	
		
	